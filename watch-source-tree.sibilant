


(include "kit/macros")
(import-namespace kit)

(include "kit/header")

(require! 'sibilant 'repl 'chokidar

          (lit File-system) "./lib/file-system"
          (lit Source-map) "./lib/source-map")

(print "source map" Source-map)

(macro entask (o ...body) `(set @o 'state (then  (get @o 'state) state ...@body)))


(def invalidate-module-cache  ([src lib])
  (delete (get require.cache src.path))
  (delete (get require.cache lib.path)))

(def refresh-module ([src lib])
  (invalidate-module-cache [src lib])
  (require lib.path))

(pipe Source-map.event
      (.on  'update (aprint "updated") )
      (.on 'update invalidate-module-cache)
      (.on  'load (aprint "loaded") ))

;; next step is to revise the engine, move all relevent code in sib to src and
;; build it to compile properly to lib
(.load Source-map
       "index"
       "file-system"
       "source-map"
       "interface"
       "tree")

(.load Electron-process "./scripts/start.js")
(.load )

;; (pipe (.then (-> )
;;              (athrow Error "failed to load"))

;;       (.then (-> ) (athrow Error "failed to load")))

