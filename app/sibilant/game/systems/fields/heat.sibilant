;; (var Air ((create Field-system) 'Air))

;; (describe Air )
;; (describe Air.Component )

(define-field Heat true)

(describe Heat

          (gain 1)
          (retention 0.9)
          (loss 0.1)

          (max 0)

          (total 0)

          (influences [ Sun  ])
          (gmth update (ticks components field)
                (.update Field-system ticks components field )
                (assign this.total 0))
          )

(describe Heat.Component

          (init (x y (neiborhood (moore x y this.field))))




          (gamma 1)
          (gett r (percent-to-color (Math.pow (/ this.value this.max) this.gamma)))
          (g 1)
          (b 1)

          (gett a (percent-to-color 0.9))
          (gmth update (tick x y influences loss retention gain field value max neiborhood)

                (var heat value)
                (var net (net-heat retention gain loss influences neiborhood))


                ;; (var average-heat (.convolve  average-kernel (get (.get Heat x y) 'neiborhood)))

                ;; (var heat-influence (/    (+ 1 average-heat) (+ 1 heat) ))
                ;; (var t2 (*  heat heat-influence))

                (when (> net this.max)
                  ;;(print "max heat is now" net)
                  (assign Heat.max net))

                (.set field x y net)))




(def-memoized net-heat (retention gain loss influences neiborhood)
  (var net (+  (* retention gain (summate influences)) (*convolve  average-kernel neiborhood)))
  (if (> net loss) (- net loss) 0))




;; Test logs. If these throw an error, there was a breaking change some where
(print systems)

(print (.map Heat.components (=> (c) c.influences)))

;; (var Thermal-energy ((create Field-system) "ThermalEnergy" (/ Field-system.width 2) (/ Field-system.height 2)))

;; (describe Thermal-energy.Component
;;           (init (x y))
;;           )

;; (def-generic Thermal-energy.Component.update (tick x y)
;;   (assign value (/ (.convolve neiborhood average-kernel) 9)))

(print Heat.components.length
       (pipe Heat.components
             (.map (=> (c) [c.x c.y c.value c.r]))))

(print average-kernel)
(print (.convolve average-kernel (matrix 3 3
                                         [
                                         1 1 1
                                         1 1 1
                                         1 1 1
                                         ])))
