(include "kit/macros.sibilant")

(import-namespace kit)

(include "./headers")

(def-lit-macro gmth (name args ...body)
  `(generic @name (mth) @args ...@body))

(def-lit-macro mth (name args ...body)
  `(mth @name @args ...@body))

(def-lit-macro def (name args ...body)
  `(mth @name @args ...@body))

(def-lit-macro def-generic (name args ...body)
  `(gmth @name @args ...@body))

(macro if! (cond ...body) `(state if @cond  ...@(interleave ";\n" body)))


(macro def-description (name args ...body)
       "define a type and describe it in a function like syntax. The arguements body is passed to the last instance of the init macro as its argument body."

       (def init-expression? (e) (and (expression? e) (= (get (first e.contents) 'token)  'init)))
       (def describer? (e) (not (init-expression? e)))

       (var init-form (pipe body (.filter  init-expression?)
                            last
                            ))
       (var init-body (ternary init-form (rest init-form.contents) []))

       (var description [ `(init @args ...@init-body)...(pipe body (.filter  describer?))])

       (if (dotted? name)
           `(set Descriptions (quote @name) (mixin (lit ...@description) @name  ))

           `(set Descriptions (quote @name) (mixin (lit ...@description) @name  ))))



(var dom-tree-root

     (pipe document.body
           (with-dom
               (.div .id "container"
                     (.h1 "SPECIATION")
                     (.div .id "stage")))))

(.render dom-tree-root)
