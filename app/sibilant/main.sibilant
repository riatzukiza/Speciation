(include "kit/macros.sibilant")
(include "kit/util.sibilant")

(import-namespace kit)

(def-lit-macro gmth (name args ...body)
  `(generic @name (mth) @args ...@body))

(def-lit-macro mth (name args ...body)
  `(mth @name @args ...@body))

(def-lit-macro def (name args ...body)
  `(mth @name @args ...@body))

(def-lit-macro def-generic (name args ...body)
  `(gmth @name @args ...@body))
(def-lit-macro gett (...body)
  `(gett ...@body))
(include "./headers")


(macro if! (cond ...body) `(state if @cond  ...@(interleave ";\n" body)))


(macro def-description (name args ...body)
       "define a type and describe it in a function like syntax. The arguements body is passed to the last instance of the init macro as its argument body."

       (def init-expression? (e) (and (expression? e) (= (get (first e.contents) 'token)  'init)))
       (def describer? (e) (not (init-expression? e)))

       (var init-form (pipe body (.filter  init-expression?)
                            last
                            ))
       (var init-body (ternary init-form (rest init-form.contents) []))

       (var description [ `(init @args ...@init-body)...(pipe body (.filter  describer?))])

       (if (dotted? name)
           `(set Descriptions (quote @name) (mixin (lit ...@description) @name  ))
           `(set Descriptions (quote @name) (mixin (lit ...@description) @name  ))))



(var dom-tree-root

     (pipe document.body
           (with-dom
               (.div .id "container"
                     (.h1 "SPECIATION")
                     (.div .id "stage")))))

(.render dom-tree-root)

(var sim ( (create Simulation) 30 100 8))
(assign global.sim sim)

(include "./field.sibilant")


(def total (arr)
  "calculate the total sum of all values in an eachable."
  (var sum 0)

  (each arr (v) (incr-by sum v))
  sum)



(def display-stats (field-system)
  "calculate and log the average and total values for all cells in a system."

  (pipe field-system.field
        total
        ((aprint "total" field-system.name))

        (/  (* 100 100))
        ( (aprint "average" field-system.name))))

(def update-entities ()
  "update the state of every entity. Entity updates may affect fields and other systems."

  (each entities (ent)
        (.update ent)))

;; (def update-off-beat-fields (current-system)
;;   "Swap the transition with the state of all field systems except the one currently said to be active."
;;   (pipe systems
;;         (.filter  (=> (s) (not (= s current-system))))
;;         (each (s) (.update s.field))))
(def update-on-beat-field (current-system ticks)

  "calculate the values for the system that is said to currently be active. Systems are updated one
at a time, one per tick,so that updates to each can make changes to each. Values of each system will
be integrated for the time missing between each of their updates."

  (.update  current-system ticks)

  (.update current-system.field))

(def get-onbeat (ticks)
  "return the id of the *onbeat* or major system of the current tick"
  (get systems (mod ticks systems.length) 'symbol))

(def refresh-fields ()
  "update the state matricies of every existing field."
  (each systems (system) (.update system.field )))

(def update-display ()
  (pipe sim.layers
        (.update )
        (.render)))




;; (include "./gl.sibilant")

(include "./game")
(include "./game/starting-entities")


(on (.start sim) "tick" (now ticks)


    (update-game ticks))
