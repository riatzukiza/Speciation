(var u-res (new Uniform.Vector2 "Resolution" [sim.width sim.width]))
(var u-scale (new Uniform.Float "Scale" 1.0))

(var Color (new Type.Composite (lit (r ubyte) (g ubyte) (b ubyte) (a ubyte))))

(var Vertex (new Type.Composite (lit (point Type.Vector3)
                                     (color Color))))

(var context (new Context))

(.make-current context)
(.resize context sim.width sim.width)
;; fix this, make it a part of the dom tree.
(.append-child document.body context.canvas)

(var verts (Vertex.Array (* sim.width sim.width)))


(var Visual-field (matrix (matrix sim.width sim.width verts)))


(describe Visual-field
          (program (new Program
                        (new Shader "./andy_webgl/.ants/shader/entity.vert.glslx")
                        (new Shader "./andy_webgl/.ants/shader/entity.frag.glslx")))


          (vertex-buffer (pipe (new Buffer  gl.ARRAY_BUFFER, gl.DYNAMIC_DRAW)
                               (.bind)
                               (.data verts.data)
                               (.unbind))))

;; The approach to take is to directly replace the current layer object, so we need to develop a cocnept of layers from here.
;; We will blend these with a color overlay, using the alpha channel as a multiplier

(var layers [])

(type Layer)

(describe Layer
          (init ((entities [])
                 (*set (new Set)))

                (.push layers this))

          (gmth add (entity entities)
                (.push entities entity))
          (gmth remove ())
          (gmth each ())
          (gmth update (entities)
                (each entities (e)
                      (var v (.get Visual-field e.x e.y))
                      (var color v.color)
                      (assign color.r (Blend-mode.average e.r)
                              color.g (Blend-mode.average e.g)
                              color.b (Blend-mode.average e.b)
                              color.a (Blend-mode.average e.a)
                              )
                      )))
