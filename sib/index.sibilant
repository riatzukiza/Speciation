(include "kit/macros.sibilant")

(import-namespace kit)

(include "kit/header")
(macro in ( k o) [k " in " o])
(macro instance-of? (item type) ["("  type " " 'instanceof " " item ")"])
(macro clear-compiler-cache ()
       ())




(macro of! (assigner name col)
       [ assigner " " name " of " col ])

(macro for-of! (name set ...body)
       ["for (" `(of! var @name @set) ")" "\n{\n"
       ...(interleave ";\n"body)
       "\n}\n"
       ])

(macro all-of! ( set name ...body)
       `(for-of! @name @set ...@body))

(macro alias (name object)
       `(gett @name (get @object (quote @name))))

(macro do-times (n ...body)
       `(for ( i 0) (< i @n) (++ i)
             ...@body))

(macro for! (var-exp cond inc ...body)
       (var index-name (first var-exp.contents)
            index-initial (second var-exp.contents))

       ["for (" `(var @index-name @index-initial) cond ";" inc")" "\n{\n" 
       ...(interleave ";\n" body) "\n}\n"])

(macro for (var-exp cond inc ...body)
       `(scoped (var $for null)
                (for! @var-exp @cond @inc
                      (assign $for (scoped ...@body)))
                $for))

(macro mth! (name args ...body) `(state @name (comma ...@(mac-sym-con args)) ...@body))

(macro def! (name args ...body)
       (if (includes? name.token  "." )
           `(assign @name (function method @args ...@body))
           `(var @name (function @args ...@body))))
(macro def-generic! (name args ...body)
       `(generic @name (def!) @args  ...@body))

;;(alias-macro flat-pipe loop)

(macro sample (matrix el-name x y w h ...body)
       `(loop

           (collect r @matrix)

           (for ( i 0) (< i @w) (++ i))
           (for ( j 0) (< j @h) (++ j)

                ( x @x)
                ( y @y)

                (var @el-name (.get @matrix  (+ i @x) (+ j @y) ))

                ...@body )))

(macro collide (ent ...body) `(if (or (not @ent) (= @ent empty) (= @ent 0))
                                  (do ...@body)))

(macro area (space el-name center size ...body)
       `(each-in-area @space @center (=> (@el-name i j x y) ...@body) @size ))

(macro adjacent (matrix value-name center ...body)
       `(area @matrix @value-name @center 3 ...@body))


(macro all-zero (w h type)
       `(.dmap ((create Matrix)  @w @h (new @type (* @w @h))) (lambda () 0) ))

(macro allns (w h n) `(.dmap  ((create Matrix)  @w @h []) (lambda () @n) ))


(macro every (amount time ...body) `(when (= (mod  @time @amount) 0) ...@body))

(macro color (r g b)
       `(p-map (red @r) (green @g) (blue @b)))

(macro gett (name ...body)
       ["get " `(mth @name () ...@body)])

(macro sett (name val ...body)

       ["set " `(mth @name (@val) ...@body)])

(macro import (thing from) `(var (literal ...@(content-of thing)) (require @from)))




(macro member (name value)
       `(set this (quote @name) @value))


(macro const (...terms)
       (as-statement [ "const " @(pipe terms
                                       (bulk-map  (=> (name value) [name "=" value]))
                                       (interleave ",\n")
                                       )
                     ]))


(macro def-curried (name args ...body)
       `(var @name (R.curry (lambda @args ...@body))))

(macro def-generic (name args ...body)
       `(generic @name (def) @args ...@body))
(macro mth! (name args ...body)
       `(state @name (comma ...@(mac-sym-con args)) ...@body))

(macro def-var (...rest)
       `(assignment let ...@rest))

(macro let (args ...body)
       "introduce scoped variables via a single lexical closure"
       `((lambda (...@(.map args.contents (lambda (el) (first el.contents)))) ...@body)
         ...@(.map args.contents (lambda (el) (second el.contents)))) )
(macro let! (args ...body)
       "introduce scoped variables via a single lexical closure"
       (var return-expression (.pop body))
       [

       "let " `[...@(.map args.contents (lambda (el) (first el.contents)))] "=" `[ ...@(.map args.contents (lambda (el) (second el.contents))) ] ";\n"
       ...body
       `(return @return-expression)

       ]

       )

(macro let* (vars ...body)
       "introduce scoped variables via nested lexical closures"

       (if (> (length vars.contents) 1)
           `(let (@(first vars.contents))
              (let* (...@(rest vars.contents)) ...@body))
           `(let (@(first vars.contents)) ...@body)))

(macro for-up-to (index-name limit ...body)
       "execute a code fragment `limit` times, making available the current index via `index-name`. Typically used to itterate over lists."

       `(for! ( @index-name 0) (< @index-name @limit ) (++ @index-name)
            ...@body))




(macro collect (name value ...body)
       `(let (( @name @value)) ...@body @name))








(require! (lit create extend mixin cond partially-apply-after ) "kit/js/util"

          (lit  Event-emitter ) "events"

          (lit Buffer Program Shader Attribute Type Context Uniform) "webgl/lib/webgl/gl"

          (lit Blend-mode) "webgl/lib/math/color.js")

(var (lit ubyte) Type)

;; (macro in? (a b) ["("  b " in " a " )"])




(include "./lib/lib")

;; STANDING!!!!!!!!!!!!!!!!!!!!!!!

;;(include "./simulation.sibilant")

(include "./ticker")

(print (pipe Ticker
       (.init  5)
       (.start )
       (.remove-all-listeners 'tick)

       (.on 'tick (=> (now tick)  (.update vert-sys)))))



(var vert-sys ((create Vertex-system) 1000))
(var p1 (.insert vert-sys [[ 10 10 0 ] [ 0 255 0 255 ] ]))

(set-for p1.point 'x 20 'y 20)

(var wrap Document-node.wrap)
(var stage (dom (.div .id 'stage )))
(var container (dom (.div .id "container" stage Vertex-system.*gl.context.canvas)))

(with-dom Document-root (.div .id 'frame container))
