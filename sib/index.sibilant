(console.log "gl" window.gl)

(include "kit/macros.sibilant")
(include "kit/header")


(def-curried fset (o k v) (set o k v))

(require! 'sibilant)


(import-namespace kit)

(def window.size () [window.inner-width window.inner-height])

(include "./headers"
         "./inc/math"
         "./inc/vertex"
         "./shaders"
         "./object-pool.sibilant"
         "./ticker"
         "./game"
         "./pooled-system.sibilant"
         "./entity-system.sibilant"
         "./systems/vertex-context.sibilant"
         "./systems/interfaces/field"
         "./systems/random-field"
         ;;"./tests.sibilant"
         )

(var dim (window.size))

(var context ((create Vertex-context) dim))

(def-interface Data-layer ())
(def-interface View-layer ())

(def-interface Layers (data view)

  (extend Pooled-system)

  (def add-data ())
  (def add-view ()))

;; (var rand-field ((create Random-field) (.map dim (fpipe (/ 4) Math.ceil)) context 4))

;; (print rand-field)

;; (.populate rand-field)

(var lagged-ticks 0)

(def handle-lag ( (default handle-lag (-> )))
  (if (> Ticker.elapsed Ticker.rate)
      (handle-lag)
      (assign lagged-ticks 0)))

;; (print (.get rand-field.matrix 10 10))

;; (def-interface Tile-system (layers )
;;   (extend Pooled-system))

;; (var test-unit (.spawn context))
;; (var )

(pipe Ticker
      (.init  1)
      (.start )

      (.remove-all-listeners 'tick)

      (.on 'tick (=> (now tick)
                     ;;(handle-lag (-> (print "lagging for" lagged-ticks)))

                     (.update context)
                     ;;(.update rand-field)

                     )))

(var wrap Document-node.wrap)
(var stage (dom (.div .id 'stage )))
(var container (dom (.div .id "container"  stage context.context.canvas)))

(with-dom Document-root
  (.div .id 'frame container))

(print "DONE LOADING")
