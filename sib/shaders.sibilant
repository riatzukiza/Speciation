(def def-glsl (out-type name in-types (dots body))

  (collect shader (.join [out-type name "(" (.join in-types ",") ")" "{\n"
                    (dots body)
                    "}"] " ")
           (print "shader" shader)
           ))

(meta )

(def vert-shader (point-size)
  ("#version 300 es
in vec3 a_point;
in vec4 a_color;

out highp vec4 vColor;

uniform vec2  u_Resolution;
uniform float u_Scale;"

(def-glsl "vec4" "clipspace_coordinate" ["vec3 xyz", "float scale", "vec2 res"]
          " return vec4( (xyz * vec3(1.0,1.0,1.0) * scale) / "
          " (vec3(res,1.0)) * 1.98 - 0.99, 1.0) * vec4( 1.0,-1.0,1.0,1.0 ); ")

(def-glsl "void" 'main ["void"]
          ("gl_Position  = clipspace_coordinate( a_point, u_Scale, u_Resolution );
              gl_PointSize = " point-size ";
              vColor       = a_color; "))))

(var fragment-shader-string ("#version 300 es
precision mediump float;

in  vec4 vColor;
out vec4 FragColor;

void main(void)
{
 FragColor = vColor;
           }"))
