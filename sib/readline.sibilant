(include "kit/macros.sibilant")





(import-namespace kit)

(require! R "ramda"

          "vm" "fs" "sibilant"

          (lit create extend mixin cond partially-apply-after ) "kit/js/util"
          ;;(lit File-system) "file-system"
          )

(macro def-generic (name args ...body)
       `(generic @name (def) @args ...@body))


(var to-string (R.invoker 0 "toString"))

(var lisp-fragment ""
     waiting-for-lisp false
     paren-depth 0)

(def create-context ()
  (var context (vm.create-context))
  (set module 'filename (pipe (process.cwd) (concat "/exec")))
  (set context
       '*sibilant sibilant
       'module  module
       'require require
       'context context)
  (each-key key global (set context key (get global key)))
  context)

(set global
     '*sibilant sibilant
     'module  module
     'require require
     'exports exports
     )


(def plift (f)
  (print "lifting" f)
  (promised ((dots args)) (apply f [ (dots args) (=> (err data) (if err (reject err) (resolve data))) ])))

 (var read-file (plift fs.read-file))


(var eval-index 0)



(generic eval-file (def-promised) (path *context name)
         (print "path" path)
         (pipe (read-file path "utf8")
               (.then (partially-apply-after eval-string (+ name ":" path)))))


(def-generic eval-string (sibilant-string name)

  (print "compiling sibilant" sibilant-string)

  (var js (get (sibilant sibilant-string) 'js))

  (print "evaluating js" js)

  (++ eval-index)
  (vm.run-in-this-context   js (+ name ":" eval-index)))



(def-generic eval-stream ())

(assign sibilant.dir "./sib")

(type Sibilant-context
      (property name "symbiants")
      ;;(property *context context)
      (property *sibilant sibilant)
      eval-string
      eval-file
      eval-stream
      )


(print "bootstrapping complete, starting app.")


(var open-depth 0
     close-depth 0)

(macro each-char-of (s ...body)

       `(.for-each (pipe @s (.split "")) (=> (char) ...@body)))

(def accumulate-lisp (msg)
  (print "accumulating lisp" msg)

  (incr-by lisp-fragment (+ msg "\n"))

  (loop (each-char-of msg)

     (if (= char "(")
         (++ open-depth)

         (= char ")")
         (++ close-depth)))

  (when  (= open-depth close-depth)

    (var program lisp-fragment)
    (assign lisp-fragment "")

    (.eval-string Sibilant-context program )))



(print "readline setting up")
(require! "net")

(def accumulate-lisp-from-stream (reader)
  (on reader "data" (data)
      (pipe data
            (.to-string)
            (.split "\n")
            (.for-each accumulate-lisp))))

(var readline-socket (pipe net
                           (.connect  8120 (-> (print "connected to repl") (accumulate-lisp-from-stream readline-socket)))
                           (.on "close" (aprint "connection closed to repl"))))

(.eval-string Sibilant-context "(include \"./index.sibilant\")")
