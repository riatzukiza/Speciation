
(include "../object-pool.sibilant")

(def singleton ()
  "A builder function for instantiating interfaces
who are to only have one instance, them selves."
  (print "building pooled system" this)
  (.init this))
;; Last, but not least, this is where we finally make use of the object pool.
;; The Pooled system is a template instance, which we will use to build our entity system,
;; and all future systems.


(def-interface Pooled-system
    (limit
     (interface (lit (def init ())))
     (*pool ((create Object-pool) limit interface)))

  (limit 10000)

  (init (.register this interface))

  (systems (new Map))

  (def spawn ()
    "aquire an object from the systems pool, and initialize it."
    (print "spawning from" this arguments)
    (collect r (pipe this.*pool (.aquire))
             (print "spawning" r)
             (.init r (dots arguments))
             ))

  (def despawn (obj)
    "remove an object from the system, and release it back into the pool."

    (pipe this.*pool (.release (.clear obj))))

  (def register (interface)
    "Associate an interface with a system, and add the system to the collection of all active systems."
    (assign interface.system this)

    (print "registering" interface "with" this)

    (.set this.systems this this))

  (def update ()
    "update every active member of the system"

    (each this.*pool.*in-use (member)
          (print "member" member)
          (.update member))))

;; I want to remove the position, color, and collision aspects of an entity from the
;; entity its self.
;; Having any data at all in the entity defeats the purpose of the entity entirely.


;; But this will work for now.

(def-interface Entity  (x y components)
  (extend Event-emitter.prototype)

  (init

   (if (not (.has Collision [x y]))
       (do (.set Collision [x y] this)

           (.call Event-emitter this)

           (.add  this.layer this)

         (assign this.components (.map components (=> (T) (set this T.symbol (create-instance-of T this))))))

       (.despawn this)))

  (layer (.get sim.layers))

  (def spawn ()
    "Aquire an empty entity instance, and initialize it."

    (print "spawning entity" this)

    (.spawn this.system (dots arguments)))

  (gmth clear ((entity this) layer)

        (.delete Collision [this.x this.y])
        (.delete layer entity)

        (assign this.components []))

  (def despawn ()

    "Remove this entity from the system."

    (.despawn this.system this))

  (def clear (entity)
    "remove an entity from the system, and clear its component list."

    (each this.components (comp)
          ;; (.despawn comp)
          ))

  (gmth update (components)
        "update every component of this entity in order of appearance."
        (each components (comp)


              (.update comp this))))

(def-interface Entity-system (limit)

  (extend Pooled-system)

  (init (.init Pooled-system))

  (interface Entity)


  (mth move (entity [x y])
       "move an entity to the given location, if the location does not collide with any other entities."
       (.move Collision [x y] entity)))

(include "./entities/algae.sibilant")

;; (def-interface Component-type ())
;; (def-interface Component-system (limit)
;;   (extend Pooled-system)
;;   (interface Component-type))
