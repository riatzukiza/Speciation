
(include "./rendering/header"
         "./rendering/gl"
         "./rendering/layer"
         "./rendering/shader")

(def-interface Scaling-vertex (layer)

  (extend Renderable)

  (structure (new Andy.Gl.Type.Composite
                  (lit (point Andy.Type.Vector3)
                       (color Andy.Color.RGBA)
                       (size Andy.Type.float)))))

;;(assign global.Program Andy.Gl.Program)

(def-interface Rendering ((dimensions (window.size))
                          (limit 100)
                          (blend true )
                          (context (Gl.context dimensions blend))
                          (layers []))

  (extend Pooled-system)

  (init

   (print "initialziing rendering system" this)

   (set this.interface
        'context context
        'rendering this)

   (.enable context.gl context.gl.BLEND)

   (.blend-equation context.gl context.gl.FUNC_ADD)

   (.blend-func-separate context.gl
                         context.gl.SRC_ALPHA
                         context.gl.ONE_MINUS_SRC_ALPHA
                         context.gl.ONE
                         context.gl.ONE_MINUS_SRC_ALPHA)

   (.call Pooled-system.init this limit)
   (print "done initializing rendering system" this))

  (interface Layer)

  (def load ((lit dimensions limit blend))
    ((create Rendering ) dimensions limit blend))

  (def-generic update (layers context)
    "render each visible dot to the screen"
    (.clear context)
    (.each layers rendered)))



